git init 
git add readme.txt
git commit -m "shenmedongxi"
git log 
git log --pretty=oneline
git log --graph --pretty=oneline --abbrev-commit
cat readme.txt
git reset --hard HEAD^
git reset --hard 9a641
git reflog
git reset HEAD readme.txt  可以把暂存区的修改撤销掉
git checkout readme.txt
文件名称前面有两个横杠，并且中间采用空格分隔（否则报错）。此种方式可以防止Git出现误判，
加入暂存区有一个文件名为ant（没有后缀名），恰好当前项目也有有个名为ant的分支，这个时候Git会优先将ant当做分支处理，于是就有可能导致错误
git checkout -- readme.txt  丢弃工作区的修改  如果有add 则恢复到暂存区  如果没有则退回到master 分支
git checkout HEAD readme.txt
git restore --worktree readme.txt  从master恢复工作区内容  船新版本
git restore --staged readme.txt  从master恢复暂存区
git restore --source=HEAD --staged --worktree readme.txt
git diff HEAD -- readme.txt
git diff readme.txt
git diff
git rm test.txt
git commit -m "remove test.txt"
git remote rm origin 删除与远程库的关联
git remote add origin git@github.com:leego-y/learngit.git   与远程库进行关联
git config --global --list
git config --global user.name
git config --global user.email
git config --global user.name “yourname”
git config --global user.email “youremail”
ssh-keygen -t rsa -C   一路下去创建本机的ssh
clip < ~/.ssh/id_rsa.pub  直接复制会破坏格式
ssh -T git@github.com  测试连接是否成功
ssh-agent -s
ssh-add ~/.ssh/id_rsa 
git push -u origin master 推送分支所有内容
git push origin master 每次commit 之后都最好提交一次
git remote -v 查看远程库信息
git remote rm origin 解除与远程库的关联
git clone git@github.com:leego-y/gitskills.git  复制远程库
git checkout -b dev  即创建又切换
git branch dev 创建
git checkout dev 切换
git switch -c dev 新的切换命令更加科学 创建并切换分支
git switch dev     
git branch
git merge dev
git branch -d dev  删除分支
git log --graph  分支合并图
git merge --no-ff -m "merge with no-ff" dev
git stash  保存分支的工作现场
git stash list  查看保存的工作现场
git stash apply 9ad0c  恢复工作现场
git stash drop 手动删除工作现场
git stash pop 恢复工作现场  并删除
git cherry-pick 4c805e2  master修复bug 合并到dev上
git branch -c dev origin/dev  本地clone时只有master,没有dev  获取远程的dev 
git pull 远程拉取此分支 相当于git fetch + git merge  git pull -r 相当于 git fetch + git rebase
git branch --set-upstream-to <branch-name> origin/<branch-name>  本地分支与远程分支的链接创建关联
git push origin <branch-name>
git merge    git rebase   rebase 相当于把dev分支与master分支之前的每一次提交进行cherry-pick 然后再合并到master上
git tag v1.0 默认是最新版本打标签
git tag v0.8 cf810 给之前的版本打标签
git tag  查看所有的标签
git show 0.9
git tag -a v0.8 -m "version 0.8 released" 2ced3
git tag -d v1.0 删除标签
git push origin v1.0
git push origin --tags
git tag -d v0.8  git push origin :refs/tags/v0.8
.gitignore 配置忽略文件   
*.so
*.egg
*.egg-info   字符串匹配忽略某些文件
！.gitignore
!App.class
git add App.class   The following paths are ignored by one of your .gitignore files:
git add -f App.class
git check-ignore -v App.class  查看规则为什么会忽略这个文件

git config --global alias.st status  配置别名
git config --global alias.ci commit 
git config --global alias.br branch
git log -1  最后一次提交
git config --global alias.last 'log -1'
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
--global 是针对当前用户起作用 如果不加那只对当前仓库起作用
cat .git/config 查看当前仓库的设置
git .gitconfig 用户主目录下的文件  